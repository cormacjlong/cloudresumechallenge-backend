import unittest
from unittest.mock import patch, MagicMock

from azure.functions import HttpRequest
from function_app import visitorcounter  # Adjust the import based on your project structure

class TestFunction(unittest.TestCase):

    @patch('os.getenv')
    @patch('azure.data.tables.TableServiceClient')
    def test_function_app(self, mock_table_service_client, mock_getenv):
        # Setup the fake connection string
        mock_getenv.return_value = 'DefaultEndpointsProtocol=https;AccountName=FakeAccountName;AccountKey=FakeAccountKey;EndpointSuffix=core.windows.net'
        
        # Mock TableServiceClient methods
        mock_client = mock_table_service_client.return_value
        mock_table_client = MagicMock()
        
        # Mock the entity behavior
        mock_entity = MagicMock()
        mock_entity['Count'] = 24  # Setting Count on the mock entity
        mock_table_client.get_entity.side_effect = [Exception("Entity not found"), mock_entity]

        mock_table_client.create_entity.return_value = None
        mock_table_client.update_entity.return_value = None

        mock_client.get_table_client.return_value = mock_table_client

        # Construct a mock HTTP request
        req = HttpRequest(method='GET', url='/api/visitorcounter', body=None, params={})
        
        # Call the function
        resp = visitorcounter(req)

        # Assert the expected outcome
        self.assertIsNotNone(resp, "Function returned None instead of a response object")
        self.assertEqual(resp.status_code, 200)
